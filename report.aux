\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand\HyField@AuxAddToFields[1]{}
\providecommand\HyField@AuxAddToCoFields[2]{}
\babel@aux{english}{}
\@writefile{toc}{\contentsline {paragraph}{How would a client complete one full cycle of the booking process, for both a successful and failed case? Base yourself on the example scenarios in Figure 1. Create sequence drawings to illustrate this.\\}{1}{section*.1}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{When do classes need to be serializable? You may illustrate this with an example class.\\}{1}{section*.2}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{When do classes need to be remotely accessible (Remote)? You may illustrate this with an example class.\\}{1}{section*.3}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{What data has to be transmitted between client and server and back when requesting the number of reservations of a specific renter?\\}{1}{section*.4}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{What is the reasoning behind your distribution of remote objects over hosts? Show which hosts execute which classes, if run in a real distributed deployment (not a lab deployment where everything runs on the same machine). Create a component/deployment diagram to illustrate this: highlight where the client and server are.\\}{1}{section*.5}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{How have you implemented the naming service, and what role does the built-in RMI registry play? Why did you take this approach?\\}{2}{section*.6}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Which approach did you take to achieve life cycle management of sessions? Indicate why you picked this approach, in particular where you store the sessions.\\}{2}{section*.7}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{Why is a Java RMI application not thread-safe by default? How does your application of synchronization achieve thread-safety?\\}{2}{section*.8}\protected@file@percent }
\@writefile{toc}{\contentsline {paragraph}{How does your solution to concurrency control affect the scalability of your design? Could synchronization become a bottleneck?\\}{2}{section*.9}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Sequence diagram for a succesful case}}{3}{figure.1}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Sequence diagram for a failed case}}{4}{figure.2}\protected@file@percent }
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Deployment diagram}}{5}{figure.3}\protected@file@percent }
